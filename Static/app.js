// static/app.js // Shared helper: show JSON nicely function prettyJSON(obj) {   return JSON.stringify(obj, null, 2); }  // Update user email display (optional) async function fetchUserInfo() {   // The backend doesn't expose a /me endpoint, but index template will still show the page   // If you want, implement a /api/me endpoint that returns session user info and call it here. }  // Submit optimization async function submitOptimization() {   const func = document.getElementById('func').value.trim();   const initialRaw = document.getElementById('initial_params').value.trim();   const boundsRaw = document.getElementById('bounds').value.trim();   if (!func) {     alert('Function is required.');     return;   }    let initial_params = null;   let bounds = null;    if (initialRaw) {     try {       initial_params = JSON.parse(initialRaw);       if (!Array.isArray(initial_params)) throw new Error('initial_params must be an array');     } catch (e) {       alert('Invalid initial_params: ' + e.message);       return;     }   }    if (boundsRaw) {     try {       bounds = JSON.parse(boundsRaw);       if (!Array.isArray(bounds)) throw new Error('bounds must be an array of [min,max] pairs');     } catch (e) {       alert('Invalid bounds: ' + e.message);       return;     }   }    const payload = { func };   if (initial_params !== null) payload.initial_params = initial_params;   if (bounds !== null) payload.bounds = bounds;    document.getElementById('result').textContent = 'Running...';    try {     const res = await fetch('/api/v1/optimization', {       method: 'POST',       headers: {'Content-Type':'application/json'},       body: JSON.stringify(payload)     });     const data = await res.json();     if (!res.ok) {       document.getElementById('result').textContent = 'Error: ' + (data.error || JSON.stringify(data));       return;     }     // Pretty display     document.getElementById('result').innerHTML = '<h3>Results</h3><pre>' + prettyJSON(data) + '</pre>';   } catch (err) {     document.getElementById('result').textContent = 'Request failed: ' + err.message;   } }  // Submit plot async function submitPlot() {   const func = document.getElementById('func').value.trim();   const xRangeRaw = document.getElementById('x_range').value.trim();   const initialRaw = document.getElementById('initial_params').value.trim();   const boundsRaw = document.getElementById('bounds').value.trim();    if (!func || !xRangeRaw) {     alert('Function and x_range are required for plotting.');     return;   }    let x_range;   try {     x_range = JSON.parse(xRangeRaw);     if (!Array.isArray(x_range) || x_range.length !== 2) throw new Error('x_range must be [xmin,xmax]');   } catch (e) {     alert('Invalid x_range: ' + e.message);     return;   }    let initial_params = null;   let bounds = null;   if (initialRaw) {     try { initial_params = JSON.parse(initialRaw); } catch (e) { alert('Invalid initial_params'); return; }   }   if (boundsRaw) {     try { bounds = JSON.parse(boundsRaw); } catch (e) { alert('Invalid bounds'); return; }   }    const payload = { func, x_range };   if (initial_params) payload.initial_params = initial_params;   if (bounds) payload.bounds = bounds;    document.getElementById('plot-result').textContent = 'Generating plot...';    try {     const res = await fetch('/api/v1/plot', {       method: 'POST',       headers: {'Content-Type':'application/json'},       body: JSON.stringify(payload)     });     const data = await res.json();     if (!res.ok) {       document.getElementById('plot-result').textContent = 'Error: ' + (data.error || JSON.stringify(data));       return;     }      // Show plot and results     const html = [];     html.push('<h3>Plot</h3>');     html.push(`<img alt=